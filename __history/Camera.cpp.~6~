//---------------------------------------------------------------------------

#pragma hdrstop
#include "RS232.h"
#include "Camera.h"
#include "trame.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
// envoie d'une trame pour activer la camera
Camera::Camera(RS232 * port)
{
	this->port = port;
	char texte[6];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x04;
	texte[3] = 0x00;
	texte[4] = 0x02;
	texte[5] =  0xFF;

	this->port->Write(texte, 6);
}
// envoie d'une trame pour desactiver la camera
Camera::~Camera()
{
	char texte[6];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x04;
	texte[3] = 0x00;
	texte[4] = 0x03;
	texte[5] =  0xFF;
	port->Write(texte, 6);
}
// envoie d'une trame pour dezoomer la camera
Camera::ZoomMoins()
{

	char texte[6];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x04;
	texte[3] = 0x07;
	texte[4] = 0x03;
	texte[5] = 0xFF;
	port->Write(texte, 6);
}
// envoie d'une trame pour stoper le zoom/dezoomer la camera
Camera::ZoomStop()
{
	char texte[6];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x04;
	texte[3] = 0x07;
	texte[4] = 0x00;
	texte[5] = 0xFF;
	port->Write(texte, 6);
}
// envoie d'une trame pour zoomer la camera
Camera::ZoomPlus()
{

	char texte[6];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x04;
	texte[3] = 0x07;
	texte[4] = 0x02;
	texte[5] = 0xFF;
	port->Write(texte, 6);
}
// envoie d'une trame pour oriente la camera à gauche
Camera::Gauche()
{
	char texte[9];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x06;
	texte[3] = 0x01;
	texte[4] = 0x03;
	texte[5] = 0x01;
	texte[6] = 0x01;
	texte[7] = 0x03;
	texte[8] = 0xFF;
	port->Write(texte, 9);
}
// envoie d'une trame pour oriente la camera à droite
Camera::Droite()
{
	char texte[9];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x06;
	texte[3] = 0x01;
	texte[4] = 0x03;
	texte[5] = 0x01;
	texte[6] = 0x02;
	texte[7] = 0x03;
	texte[8] = 0xFF;
	port->Write(texte, 9);
}
// envoie d'une trame pour oriente la camera en bas
Camera::Bas()
{
	char texte[9];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x06;
	texte[3] = 0x01;
	texte[4] = 0x03;
	texte[5] = 0x01;
	texte[6] = 0x03;
	texte[7] = 0x02;
	texte[8] = 0xFF;
	port->Write(texte, 9);
}
// envoie d'une trame pour oriente la camera en haut
Camera::Haut()
{
	char texte[9];
	texte[0] = 0x81;
	texte[1] = 0x01;
	texte[2] = 0x06;
	texte[3] = 0x01;
	texte[4] = 0x03;
	texte[5] = 0x01;
	texte[6] = 0x03;
	texte[7] = 0x01;
	texte[8] = 0xFF;
	port->Write(texte, 9);
}
// envoie d'une trame pour effectuer 3 balayages d'affilé
Camera::Auto()
{
	char home[5];
	home[0] = 0x81;
	home[1] = 0x01;
	home[2] = 0x06;
	home[3] = 0x04;
	home[4] = 0xFF;

	char gauche[9];
	gauche[0] = 0x81;
	gauche[1] = 0x01;
	gauche[2] = 0x06;
	gauche[3] = 0x01;
	gauche[4] = 0x07;
	gauche[5] = 0x05;
	gauche[6] = 0x01;
	gauche[7] = 0x03;
	gauche[8] = 0xFF;

	char droite[9];
	droite[0] = 0x81;
	droite[1] = 0x01;
	droite[2] = 0x06;
	droite[3] = 0x01;
	droite[4] = 0x07;
	droite[5] = 0x05;
	droite[6] = 0x02;
	droite[7] = 0x03;
	droite[8] = 0xFF;

	port->Write(home, 5);
	for(int i = 0; i<3 ;i++)
	{
		port->Write(gauche, 9);
		Sleep(7800);
		port->Write(droite, 9);
		Sleep(7800);
	}
	Sleep(3000);
	port->Write(home, 5);
}
